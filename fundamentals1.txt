GENERAL OVERVIEW

/* JavaScript = high level object oriented, multi paradigm programming language */
// high level - don't have to think about memory management whilst javascript runs our program
// object oriented - mostly based on objects, for storing most kinds of data
// multi paradigm - flexible, can use different programming styles like imperitive and declerative
// programming language - tool instruct computer to do things

/* Web Development? */
// HTML = content of page - text, images, buttons
// CSS = presentation of content - styling, laying out elements on webpage
/* JavaScript  = programming language - allows developers dynamic and interactive effects to any webpage.
Also use it manipulate the content or CSS, load data from remote server and build entire applications 
in the browser - we then call web applications. */

HTML = nouns - <p> paragraph
CSS = adjectives - p { color: red }; describes the noun. means the paragraph text is red.
JavaScript = verbs - p.hide(); means hide the paragraph - doing something so is a verb.

--------------------------------------------------------------------------------------------------------

JavaScript = dynamic effects and web applications in the browser - front end,
and web applications on web servers. node.js - run backend applications. run on web server, 
interact with databases. javascript - native mobile applications - react native.

--------------------------------------------------------------------------------------------------------

VARIABLES & VALUES

/* value = piece of data, fundamental unit of info in programming. i.e. Jonas is a value */
/* whatever the operation could be summarised as below would be value, cause value is smallest 
unit of information */

/* values can be stored into variables - to be reused over and over */
/* let firstName = "Jonas"; is declaring a variable. */

Conventions for naming varaibles:
camelCase - means that whenever have multiple words in a varaible name, write first name with lowercase, 
next words with uppercase. 

javaScript can't start variables with numbers. would be Syntax error - mistake in writing code.
varialbe names can only contain numbers, letters, underscores or dollar signs.

/* can't use reserved keywords */
let new = 27;
/* new = reserved keyword -> javascript */

don't start variable name with upper case letter

---------------------------------------------------------------------------------------------------------

DATA TYPES 

every value = object, primitive
only a primitive if not an object 

primitive - 7 TYPES
1. number - floating point (meaning always have decimals, even if we don't see them or define them). used
for decimals and integers
2. string - sequence of characters (used for text). used for text
3. boolean - logical type that can only be true or false. used for taking decisions.
4. undefined - value taken by a variable that is not yet defined - empty value. 
5. null - also means 'empty value'
6. symbol (ES2015) - unique and cannot be changed (not useful now)
7. BigInt (ES2020) - larger integars than number type can hold.

JavaScript has dynamic typing - we do not have to manually define data type of the value stored in a variable.
Instead, data types are determined automatically.

JavaScript - value has a type. NOT the variable. Variables simply store a value that has as type. 

Another application of dynamic typing is later in our code, we can assign a new value in a different data 
type to the same variable without a problem.
Example:
variable x can initially be a number then later a string. Can be useful but also difficult to find bugs. 

Boolean = true/ false. 
just writing 'true' is a boolean value - i.e. console.log(true) -> not a string cause printed in pink rather
than white as a string would be printed in within the console.

/* can store booleans in variables */
let javascriptIsFun = true;
/* remember, variable declaration needs to happen before the log, because javascript is executed
from top to bottom */
console.log(javascriptIsFun);

/* typeof is an operator like + or - operator that we can use to the type of a value */
/* console.log typeof true -> will show new value in console, which is a string which is the typeof 
value */
console.log(typeof true); - will show boolean
console.log(typeof javascriptIsFun); - will show boolean
console.log(typeof 23); - will show number
/* need quotes for a string - otherwise reference error - because javascript sees it as a variable. 
JavaScript is looking for a variable that doesn't exist. We never declared a variable called Tristan */
console.log(typeof "Tristan"); - will show string


/* dynamic typing - can easily change the type of a value that is held by a variable. What matters is 
that we do not write the let again. */
javascriptIsFun = "YES!";
/* First time we declare a new varaible, we need to do it using let. But then, when we want to change the 
value - of the varaible, we simply write it again without the let. */
/* So above, we are assigning new value to the variable javascriptIsFun */

/* undefined - value taken by a variable that is not yet defined. */
/* undefined means an empty value - define variable without value */
let year;
console.log(year);
console.log(typeof year);

/* value of both is undefined -> what this means is whenever we declare an empty variable,
the value of the variable will be undefined and the type will be undefined. */

/* error typeof operator - typeof null - similar to undefined. both the value and 
the type of the value are null. */
console.log(typeof null);
/* JavaScript will say the type of null (above) is object. Error in JavaScript - never 
corrected. */

---------------------------------------------------------------------------------------------------------

LET, CONST AND VAR

Three ways of declaring variables in JavaScript.
let + const introduced ES6 -> modern JS.
var keyword old way declaring variables.

let keyword -> declare variables that will change later. (i.e. during execution of our program).

/* shown example of let - reassigning value to a variable */
/* we mutate the variable in this case */
let age = 30;
age = 31;

/* use const - declare variables that are not supposed to change at any point in the future */
/* value in a const variable cannot be changed */
const birthYear = 1991;
birthYear = 1990;
/* this produces TypeError - Assignment to constant variable */

/* fact that variables created with const are immutable also means we cannot declare empty const
variables. */
const job; produces -> Syntax error: missing initializer in const declaration.

/* should use const by default, let if things will change in the future. Good to have as little 
mutations as possible, because changing varialbes introduces potential for bugs. */








