GENERAL OVERVIEW

/* JavaScript = high level object oriented, multi paradigm programming language */
// high level - don't have to think about memory management whilst javascript runs our program
// object oriented - mostly based on objects, for storing most kinds of data
// multi paradigm - flexible, can use different programming styles like imperitive and declerative
// programming language - tool instruct computer to do things

/* Web Development? */
// HTML = content of page - text, images, buttons
// CSS = presentation of content - styling, laying out elements on webpage
/* JavaScript  = programming language - allows developers dynamic and interactive effects to any webpage.
Also use it manipulate the content or CSS, load data from remote server and build entire applications 
in the browser - we then call web applications. */

HTML = nouns - <p> paragraph
CSS = adjectives - p { color: red }; describes the noun. means the paragraph text is red.
JavaScript = verbs - p.hide(); means hide the paragraph - doing something so is a verb.

--------------------------------------------------------------------------------------------------------

JavaScript = dynamic effects and web applications in the browser - front end,
and web applications on web servers. node.js - run backend applications. run on web server, 
interact with databases. javascript - native mobile applications - react native.

--------------------------------------------------------------------------------------------------------

VARIABLES & VALUES

/* value = piece of data, fundamental unit of info in programming. i.e. Jonas is a value */
/* whatever the operation could be summarised as below would be value, cause value is smallest 
unit of information */

/* values can be stored into variables - to be reused over and over */
/* let firstName = "Jonas"; is declaring a variable. */

Conventions for naming varaibles:
camelCase - means that whenever have multiple words in a varaible name, write first name with lowercase, 
next words with uppercase. 

javaScript can't start variables with numbers. would be Syntax error - mistake in writing code.
varialbe names can only contain numbers, letters, underscores or dollar signs.

/* can't use reserved keywords */
let new = 27;
/* new = reserved keyword -> javascript */

don't start variable name with upper case letter

---------------------------------------------------------------------------------------------------------

DATA TYPES 

every value = object, primitive
only a primitive if not an object 

primitive - 7 TYPES
1. number - floating point (meaning always have decimals, even if we don't see them or define them). used
for decimals and integers
2. string - sequence of characters (used for text). used for text
3. boolean - logical type that can only be true or false. used for taking decisions.
4. undefined - value taken by a variable that is not yet defined - empty value. 
5. null - also means 'empty value'
6. symbol (ES2015) - unique and cannot be changed (not useful now)
7. BigInt (ES2020) - larger integars than number type can hold.

JavaScript has dynamic typing - we do not have to manually define data type of the value stored in a variable.
Instead, data types are determined automatically.

JavaScript - value has a type. NOT the variable. Variables simply store a value that has as type. 

Another application of dynamic typing is later in our code, we can assign a new value in a different data 
type to the same variable without a problem.
Example:
variable x can initially be a number then later a string. Can be useful but also difficult to find bugs. 

Boolean = true/ false. 
just writing 'true' is a boolean value - i.e. console.log(true) -> not a string cause printed in pink rather
than white as a string would be printed in within the console.

/* can store booleans in variables */
let javascriptIsFun = true;
/* remember, variable declaration needs to happen before the log, because javascript is executed
from top to bottom */
console.log(javascriptIsFun);

/* typeof is an operator like + or - operator that we can use to the type of a value */
/* console.log typeof true -> will show new value in console, which is a string which is the typeof 
value */
console.log(typeof true); - will show boolean
console.log(typeof javascriptIsFun); - will show boolean
console.log(typeof 23); - will show number
/* need quotes for a string - otherwise reference error - because javascript sees it as a variable. 
JavaScript is looking for a variable that doesn't exist. We never declared a variable called Tristan */
console.log(typeof "Tristan"); - will show string


/* dynamic typing - can easily change the type of a value that is held by a variable. What matters is 
that we do not write the let again. */
javascriptIsFun = "YES!";
/* First time we declare a new varaible, we need to do it using let. But then, when we want to change the 
value - of the varaible, we simply write it again without the let. */
/* So above, we are assigning new value to the variable javascriptIsFun */

/* undefined - value taken by a variable that is not yet defined. */
/* undefined means an empty value - define variable without value */
let year;
console.log(year);
console.log(typeof year);

/* value of both is undefined -> what this means is whenever we declare an empty variable,
the value of the variable will be undefined and the type will be undefined. */

/* error typeof operator - typeof null - similar to undefined. both the value and 
the type of the value are null. */
console.log(typeof null);
/* JavaScript will say the type of null (above) is object. Error in JavaScript - never 
corrected. */

---------------------------------------------------------------------------------------------------------

LET, CONST AND VAR

Three ways of declaring variables in JavaScript.
let + const introduced ES6 -> modern JS.
var keyword old way declaring variables.

let keyword -> declare variables that will change later. (i.e. during execution of our program).

/* shown example of let - reassigning value to a variable */
/* we mutate the variable in this case */
let age = 30;
age = 31;

/* use const - declare variables that are not supposed to change at any point in the future */
/* value in a const variable cannot be changed */
const birthYear = 1991;
birthYear = 1990;
/* this produces TypeError - Assignment to constant variable */

/* fact that variables created with const are immutable also means we cannot declare empty const
variables. */
const job; produces -> Syntax error: missing initializer in const declaration.

/* should use const by default, let if things will change in the future. Good to have as little 
mutations as possible, because changing varialbes introduces potential for bugs. */

/* var legacy reasons - important. Old way writing variables prior to ES6. */
/* Works similar to let -> can mutate. */
var job = "programmer";
job = "teacher";

/* let is blockscoped, var is function scoped */

---------------------------------------------------------------------------------------------------------

BASIC OPERATORS 

Operator allows us to transfer values /  combine multiple values.
Categories of operators -> mathematical, comparison, logical, Assignment

/* Mathematical operator -> use minus operator to solve simple problem. */
const ageJonas = 2037 - 1991;
const ageSarah = 2037 - 2018;
console.log(ageJonas, ageSarah);

/* other operators -> times and divide, two operators in console.log cause we can have 
more than one value in a console.log */
console.log(ageJonas * 2, ageJonas / 10, 2 ** 3);
// please note from above code -> 2 ** 3 means 2 to the power of 3 = 2 * 2 * 2

/* Another use case for plus operator -> join strings -> concatenate */
const firstName = "Tristan";
const lastName = "Griffiths";
/* to add a space? add empty string */
console.log(firstName + " " + lastName);

/* assignment operators. most simple is = operator */
let x = 10 + 5;
/* in the code above, the = is already an operator. In the code above, 
x will be assinged 15 because the + operator is executed before the assignment operator.
(This is based on operator precedence - which we'll explore shortly). */

/* Further assignment operators */
let x = 10 + 5;
/* we know that x is 15 original. x = x + 10 */
x += 10;
/* console.log x is now 25, cause x from previous step is 15 */
console.log(x);
/* x * 4 = */
x *= 4;
/* console.log x is now 100, cause x was 25 * 4 */
console.log(x);
/* x = x + 1; */
x++;
/* x = x - 1; */
x--;
/* x = x - 1; */
x--;
/* console.log x is now 99, cause x + 1 then -1 then -1 */
console.log(x);

/* Comparison operators */
const now = 2037;
const ageJonas = now - 1991;
const ageSarah = now - 2018;
console.log(ageJonas, ageSarah);

/* Comparison Operators used to produce boolean values. */
/* The boolean below will produce true cause Jonas is older than Sarah 
-> 2037 - 1991 vs 2037 - 2018 */
/* below -> asking operator - is age of jonas greater than age of Sarah. 
Operator will reply with yes (true) or no (false). */
console.log(ageJonas > ageSarah);

/* > greater */
/* < less than */
/* >=, greater equal */
/* <= less than equal */

/* greator equal application */
/* testing if sarah is of full age - she must be at least 18 */
/* She needs to be greater than 18 or exactly 18 */
console.log(ageSarah >= 18);

// console has access to all variables in the current browser tab

/* can store results if need later in code. variable hold boolean value. */
const isFullAge = ageSarah >= 18;

/* what if we don't want intermediate age variables and do a comparison in one go. */
console.log(now - 1991 > now - 2018);

/* Question - how does JavaScript know if to do the maths first or comparison first. */
/* Thought: Is the first thing to do now -1991 = 46, then JavaScript could compare 46 to now after
the > right away. */
/* If the 'Thought' was true, JavaScript would be proceeding to read the code from left to right.
But we will see that it doesn't. JavaScript has some way of knowing first it should do 
now - 1991 then it should do now - 2018 only at end when has two ages will compare them with operator 
in the middle. */

---------------------------------------------------------------------------------------------------------

OPERATOR precedence

const now = 2037;
const ageJonas = now - 1991;
const ageSarah = now - 2018;

/* Question asked at end of the last video was why do these two subtractions 
'now - 1991'
and 
'now - 2018'
are executed before the '>' comparison operator.
*/
console.log(now - 1991 > now - 2018);
/* The question is why does the console.log code above work? */

/* Works cause JavaScript has a well defined order of operator precedence. I.e. the order in
which operators are executed. 
Precedence table:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
MDN doc link
Note from this that in relation to the operation:
console.log(now - 1991 > now - 2018);
calculation ' - ' (subtraction)
comparison ' > ' (greater than)

the comparison operator has a lower precedence '12' than the subtract operator '17'. Don't need to 
know this exactly just a general idea.
Maths operators usually executed first. 
before comparison operators. 

Can also see in table which operators are executed from left-to-right and which ones from right to left.
most mathematical operators - left to right. 
*/

/* proof of left to right -> below console.log 25 - 10 - 5 = 10*/
console.log(25 - 10 - 5);

/* assingment good example of right to left execution */
/* define two variables at the same time - leave as undefined */
let x, y;
x = y = 25 - 10 - 5;
console.log(x, y);
/* console.log of x, y above produced 10 10 */
/* why are x and y both 10? When JavaScript finds this line of code to execute, it'll 
look at all the operators that are present, see the minus operators, start with these ->
high presendence 
so do:
x = y = 10 
Explain above? 10 is the result of doing 25 - 10 - 5
Now we have only two operators left -> equals operators and they are now executed. 
but these are executed right to left. so:
y = 10
then 
x = 10
so at the end x and y are worth 10. x is the last thing to be evaluated to 10. 
*/

x = y = 25 - 10 - 5;
/* why is the right to left rather than left to right? */
/* if it was left to right then x would be equal to y, which would be undefined,
because declared as an empty variable then y would be equal to 10. */

/* note on highest precedence -> grouping ( .. ) */

/* grouping ( .. ) is just like parentheses -> works just like maths where operations
within parenthese are also executed first. 
Great example is to calculate the average of two values. Goign to add ageJonas and 
ageSarah back in as variables. */
/* ageJonas and ageSarah -> calculate the average age of these two people */
const now = 2037;
const ageJonas = now - 1991;
const ageSarah = now - 2018;

/* calculate average age -> don't forget descriptive age. averageAge -> describes exactly whast this 
variable will hold. To calculate average -> add two values together and divide by 2 (when have two 
variables). */
// const averageAge = ageJonas + ageSarah / 2;
/* notes -> what is going to happen? -> look at precedence table */
/* we have the division (15) happening before the subtraction (14). So what'll happen is 
age sarah will be divided by two, then ageJonas will be added */

/* start by logging their ages to the console. then after third comma we're evaluating theory 
above by adding averageAge to the console. */
console.log(ageJonas, ageSarah, averageAge);
/* averageAge in the console above is 55.5 which is result of ageSarah / 2 + ageJonas because of order
precedence with ageJonas being more important. 55.5 doesn't make any sense cause how can average
be larger than two ages which are 46 for ageJonas and 29 for ageSarah
is because:
19 / 2 = 9.5 (ageSarah / 2) 
then 9.5 + 46 (ageJonas) = 55.5 */

/* so we should make sure ageJonas + ageSarah operation is completed first. so put in 
parentheses cause it has highest precedence in javascript (21) as shown on the mdn docs. */
const averageAge = (ageJonas + ageSarah) / 2;
/* now result of this is an average of 32 */

---------------------------------------------------------------------------------------------------------

CHALLENGE 1

Mark and John are trying to compare their BMI (Body Mass Index), which is calculated using the formula: 
BMI = mass / (height * height) (mass in kg and height in meters).

Your task is to write some code to help them:
1. Store Mark's and John's mass and height in variables called massMark, heightMark, massJohn and heightJohn.
2. Calculate both their BMIs using the formula, and store the results in two variables called 
BMIMark and BMIJohn.
3. Log the value of BMIMark and BMIJohn to the console.
4. BONUS: Create a boolean variable markHigherBMI containing information about whether Mark has a 
higher BMI than John. Log it to the console too

TEST DATA 1: Marks weighs 78 kg and is 1.69 m tall. John weighs 92 kg and is 1.95 m tall.
TEST DATA 2: Marks weighs 95 kg and is 1.88 m tall. John weighs 85 kg and is 1.76 m tall. */

/* part 1 - storing variables. Use let instead of const? Value susceptible to change especially
the mass. However, still decided to use const - use const by default */
/* TEST DATA 1 */
// const massMark = 78;
// const heightMark = 1.69;
// const massJohn = 92;
// const heightJohn = 1.95;
/* TEST DATA 2 */
const massMark = 95;
const heightMark = 1.88;
const massJohn = 85;
const heightJohn = 1.76;

/* part 2 - calculate mark and johns BMI's */
const BMIMark = massMark / heightMark ** 2;
const BMIJohn = massJohn / (heightJohn * heightJohn);
/* if BMI of Mark is higher than the BMI of John the result of the whole operator 
below will be true. Otherwise, it will be false. */
const markHigherBMI = BMIMark > BMIJohn;

/* explaining the heightMark ** 2 section -> explaining the ** operator */
** is exponentiation, and exponentiation operator returns the result of raising the 
first operand to the power of the second operand. 

for test data 1:
heightMark ** 2 means:
1.69 ** 2
1.69 * 1.69 = 2.86

for test data 2:
heightMark ** 2 means:
1.88 ** 2
1.88 * 1.88 = 3.53

3 ** 4 would be 3 to the power of 4 so 
3 * 3 * 3 * 3 = 81

/* part 3 - log results to console */
console.log(BMIMark, BMIJohn, markHigherBMI);

/* test data 1 BMIMark = higher than BMIJohn - 27.31 etc vs 24.19 
markHigherBMI -> we expect this one to be true, and console.log does indeed say true. */

/* test data 2 BMIJohn = higher than BMIMark - 27.44 etc vs 26.88 
markHigherBMI -> we expect this one to be false, and console.log does indeed say false */

---------------------------------------------------------------------------------------------------------

/* Strings - easy way to build them = template literal */

/* FIRST look at strings independently */
/* new variables - to later be concatenated  - build a string. */
const firstName = "Jonas";
const job = "teacher";
const birthYear = 1991;

/* going to use the string to create sentence. 'Hi I'm Jonas a 30 year old teacher.
Then use the birthYear to calculate the age */

/* calculating age from this year variable */
const year = 2037;

/* use + sign to concatenate strings */
/* need to put year - birthYear between parentheses -> so will do the calculation first, and then 
the concatenation. */
const jonas =
  "I'm " + firstName + ", a " + (year - birthYear) + " years old " + job + "!";
/* result of (year - birthYear) will be a number -> rest of what we're adding is strings so how are
is this going to work? type coercion. */
/* javascript convert number to string so it can concatenate them, join them with rest of string. */
console.log(jonas);

/* Since ES6 -> have much better tool for doing this -> template literals. With template literals
can write a string more normal way -> then basically insert variables directly into string. */

/* SECOND look at template literals */
/* template literal -> use backticks to tell javascript we're writing a string -> backticks above 
'tab' on the keyboard */
/* now write string and insert variables in there with ${variablename}. We can also write any 
javascript inside of ${} */
const jonasNew = `I'm ${firstName}, a ${year - birthYear} year old ${job}`;
/* logging to console to test */
console.log(jonasNew);

/* we can use backticks for any regular string shown in the console.log below */
console.log(`Just a regular string..`);

/* for multi line string previously needed \n\ in javascript for a new line */
console.log(
  "String with \n\
multiple \n\
lines"
);

/* with template literals -> we can drop it line by line just with an enter */
console.log(`String
multiple
line`);

---------------------------------------------------------------------------------------------------------

TAKING DECISIONS -> IF / ELSE STATEMENTS

/* write program -> checks whether a person is allowed to take a drivers license 
or not. if yes will print to the console. if not will print how many years are left till the
person can start taking the drivers license. */

/* again variable name -> describes exactly what we want. greatOrEqual to 18 */
// const isOldEnough = age >= 18;

/* now have boolean value, can use to take decisions using if statement */
/* if statement executed whenever the condition in parentheses is true */
/* with condition mean anything that is a boolean value */
// if() {
/* if statment executed means code in the block -> as denoted by {} */
// }

/* using isOldEnough variable here in if statment as our CONDITION */
/* We already know this will always be a BOOLEAN -> important:
cause the value of a boolean needs to be true, so code in {} will execute.
If flase not executed. */
// if (isOldEnough) {
//  console.log("Sarah can start driving license");
// }

const age = 15;

/* in practice was always write condition in the if else statement parentheses */
if (age >= 18) {
  console.log("Sarah can start driving lessons.");
} /* else will be executed whenever this condition is false */ else {
  const yearsLeft = 18 - age;
  console.log(`Sarah is too young. Wait another ${yearsLeft} years.`);
}

/* Note else blocks are optional. If theres is no else block, JavaScript 
will quickly move onto the next line as if the condition is false. */

/* if / else = control structure - this structure allows us to have more control
over the way our code is executed.
The whole code does not just execute in a linear way. JavaScript does not just execute
code in a linear way. Instead we can now control blocks of code that should execute and 
blocks that shouldn't - why its called a control structure. */

/* Another example of if/ else now lets create a variable conditionally and 
not just use console.log */
const birthYear = 2005;

/* create another variable called century, will contain century in which this person
was born. */

/* to make this work, need to define century outside if/ else block */
/* WHY? Any variable defined inside code block will not be accessible outside
of the block. So define century as empty, assign it values in the code blocks themselves. */
let century;

if (birthYear <= 2000) {
  century = 20;
} else {
  century = 21;
}
console.log(century);

Knowledge recap:
if else statment recap - we can take decisions using code -> using the if/else statment.
For that, we write if() in the parenthese we need a condition. 

Parentheses are ().

Condition is any code that returns a true or false value. 
if (birthYear => 2000) is a great example, because => operator will return true or false. 

We can use => to create a condition, which will execute the first block if true, else block 
if flase or no code if no else block.









